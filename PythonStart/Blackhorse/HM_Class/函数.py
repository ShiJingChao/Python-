# CLASS 234
# CLASS 235
# 函数基础

# 函数的使用包含两个步骤
# 1.定义函数——封装 独立的功能
# 2.调用函数——享受封装的成果

# 函数的作用，在开发程序时，使用函数可以提高编写的效率以及代码的重用
# import 函数包.九九乘法表
# 函数包.九九乘法表.multiple_table()
# ----------------------------------------------------------

# CLASS 236

# 函数的定义
# 定义函数的格式如下：

# def 函数名（）：
#     函数封装的代码
#     ...

# 1.def是英文define的缩写
# 2.函数名称应该能够表达函数封装代码的功能，方便后续的调用
# 3.函数名称的命名应该符合标识符的命名规则

# ·可以由字母、下划线、和数字组成
# ·不能以数字开头
# 不能与关键字重名

# 函数的调用

# ---------------------------------------------------

# CLASS 237

# 定义一个函数

# 注意：定义好函数之后，只表示这个函数封装了一段代码而已
# 如果不主动调用函数，函数是不会主动执行的
# def say_hello():
#     print("hello1")
#     print("hello2")
#     print("hello3")
#
# say_hello() #调用函数

# -------------------------------------------------------------------

# CLASS 238
# CLASS 239
# CLASS 240 调试
# CLASS 241 函数注释   在函数下 三对引号
# 把指针放在调用函数那按快捷键ctrl+q就能看到函数及说明注释

# name = "小明"
#
# 在函数定义之前调用函数会报错，函数未被定义

# # Python 解释器知道下方定义了一个函数


# def say_hello():
# """打招呼"""
#     print("hello1")
#     print("hello2")
#     print("hello3")

#
# print(name)
# # 只有在程序中，主动调用函数，才会让函数执行
# say_hello()  # 调用函数
#
# print(name)

# -----------------------------------------------

# CLASS 242  函数的参数

# 1.开发一个 sum_2_num的函数
# 2.函数能够实现两个数字的求和

# def sum_2_num():
#     """对两个数字的求和"""
#     num1 = 10
#     num2 = 20
#     sum = num1 + num2
#     print("%d+%d=%d" % (num1, num2, sum))
# sum_2_num()

# --------------------------------------------------------------

# CLASS 243  函数的参数的使用

# 在函数名的后面的小括号内部填写 参数
# 多个参数之间使用，分隔
# 函数的参数，增加函数的通用性，针对相同的数据处理逻辑，能够适应更多的数据
# def sum_2_num(num1, num2):
#     result = num1 + num2
#     print("%d+%d=%d" % (num1, num2, result))
# sum_2_num(50,20)

# -----------------------------------------------------

# CLASS 244     形参和实参
# 形参：定义 函数时，小括号中的参数，是用来接收参数用的，在函数内部作为变量使用、
# 实参：调用函数时，小括号中的参数，是用来把数据传递到函数内部用的

# ----------------------------------------------------------------

# CLASS 245 CLASS 246  247 248 函数的返回值
# 在程序开发中，有时候，会希望一个函数执行结束后，告诉调用者一个结果，以便调用者针对具体的结果做后续的处理
# 返回值是函数完成工作后，最后给调用者的一个结果
# 调用函数一方，可以使用变量来结婚搜函数的返回结果
# return表示返回，后续代码都不会被执行
# def sum2_2_num(num1, num2):
#     """对两个数求和"""
#     result = num1 + num2
#     return result
#
#
# print(sum2_2_num(50, 20))

# ------------------------------------------------------------

# CLASS 249 函数的嵌套调用
# CLASS 250 举例

# 一个函数又调用了另一个函数，这就是函数嵌套调用
# 如果函数test2中，调用了另外一个函数test1
# 那么执行到调用test1函数时，会先把函数test1中的人物都执行完
# 才会回到test2中调用test1 的位置，继续执行后续代码
# def test1():
#     print("*"*50)
#
# def test2():
#     print("-"*50)
#     test1()
#     print("+"*50)
# test2()

# ----------------------------------------------------------

# CLASS 251 CLASS 252 CLASS 253 CLASS 254函数嵌套的演练——打印分割线

# 需求：定义一个print_line 函数能够打印*组成的一条分割线
# def print_line():
#     print("*"*50)
# print_line()

# 需求2 ：定义一个函数能够打印由任意字符组成的分割线
# def print_line(char):
#     print(char*50)
# print_line("-")
# 需求3：定义一个寒素能够打印任意重复次数的分割线
# def print_line(char, times):
#     print(char * times)
# print_line("*", 50)

# 需求4：定义一个函数能够打印5行的分割线，分割线要求符合需求3
# 给函数加文档注释鼠标放在函数名，黄色的小灯泡选Insert documentation
# def print_line(char, times):
#     """
#     打印单行分隔线
#     :param char: 分隔字符
#     :param times: 重复的次数
#     """
#     print(char * times)
#
# def print_lines(char, times):
#     """
#     打印多行分割线
#     :param char: 分割线使用的分隔字符
#     :param times: 分割线重复的次数
#     """
#     for i in range(5):
#         print_line(char, times)
#
# print_lines("-", 50)

# 闭包
# def outF(n):
#     sum =n
#     def inF():
#         return n+1
#     return inF()
# myf = outF(10)
# print(myf)
# myf2 = outF(20)
# print(myf2)
# print(id(myf))
# print(id(myf2))

