# CLASS-432 CLASS 433 模块
# 如果模块的名字太长，可以使用as指定模块的名称，以方便在代码中的使用
# import 模块名 as 模块别名
# 注意 模块别名应该符合大驼峰命名法

# CLASS 434 局部导入
# from ...import 导入
# from 模块名 import 工具名
# 导入之后，不需要通过模块名.的方式

# CLASS 435 注意事项
# 如果两个不同模块，存在同名函数，那么后导入的模块会覆盖掉前面的模块
# 可以通过起别名的方式区分开
# 导入所有工具 from import *（不推荐，因为函数重名没有任何的提示）不需要使用模块.的方式

# CLASS 436 模块的搜索顺序
# 1.搜素当前目录制定模块名的文件，有就直接导入，没有再搜索系统目录
# 在开发时，给文件起名，不要和系统的模块文件重名，重名就会执行当前目录下的模块
# Python中每一个模块都有一个内置属性 __file__可以查看模块的完整路径
# import random
# print(random.__file__)

# CLASS 437开发原则以及导入文件会执行没有缩进的代码

# 在导入文件时，文件中所有没有任何缩进的代码都会被执行一遍
# 全局变量、函数、类 ，直接执行的代码不是向外界提供的工具！

# CLASS 438 __name__属性兼顾测试和导入两种模式
# __name__属性可以做到，测试模块的代码只是在测试情况下被运行，而在被导入时不会被执行！
#如果直接输出print(__name__)
# 结果永远都是__main__
# def say_hello():
    # print("woshihello")
# if name =="__main__":
#     print(__name__)
#     print("小明开发的模块")
#     say_hello()