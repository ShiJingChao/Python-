"""
    列表的拷贝:
        1. 列表在内存中的数据存储
            整个列表有个内存地址, 列表中的每个元素(理解为一个个个的变量), 每个变量存储对应数据的内存地址

        2. 浅拷贝
            浅拷贝的列表, 内层嵌套列表与被拷贝对象指向同一块地址;
                * 俗话曰: 通过浅拷贝出来的列表, 一旦内层嵌套列表发生改变, 拷贝对象和被拷贝对象, 的内层嵌套列表都会发生改变

            对于浅copy来说, 第一层创建的是新的内存地址, 而从第二层开始, 指向的都是同一个内存地址,
            所以对于第二层以及更深的层次来说,保持一致性;

            格式:
                list对象.copy()

        3. 深拷贝
            import copy  # 模块 .py文件  使用模块中的功能,第一步需要将模块导入到工作文件中
            copy.deepcopy()  # 深拷贝

            嵌套的可变数据类型重新开辟一块内存空间;
            拷贝对象与被拷贝对象, 拥有独立的内存空间, 一方发生改变,另一方不受影响
"""
list1 = [1, 2, 3]
list2 = [4, 5, 6]

print(id(list1))  # 查看变量在内存中的存储地址  33575496
print(id(list1[0]))  # 8791188533504  8791184601344
print(id(list1[1]))  # 8791188533536
print(id(list1[2]))  # 8791188533568

print(id(list2))  # 5854280
print(id(list2[0]))  # 8791188533600
print(id(list2[1]))  # 8791188533632
print(id(list2[2]))  # 8791188533664

list1[0] = 100
print(id(list1[0]))  # 8791184604512

print('-------------------------------------')
list3 = [100, 200]
list4 = [1, 2, list3]

# list3[1] = 300
# print(list4)  # [1, 2, [100, 300]]

list5 = list4.copy()  # 浅拷贝

print(list4)  # [1, 2, [100, 200]]
print(list5)  # [1, 2, [100, 200]]

list4[0] = 10
print(list4)  # [10, 2, [100, 200]]
print(list5)  # [1, 2, [100, 200]]

list4[2][0] = 10000
print(list4)  # [10, 2, [10000, 200]]
print(list5)  # [1, 2, [10000, 200]]

print("================================")
import copy  # 代码规范: 所有导入文件必须写在.py的开头
list6 = copy.deepcopy(list4)

print(list4)  # [10, 2, [10000, 200]]
print(list6)  # [10, 2, [10000, 200]]

list4[0] = 11  # 更改第一层元素的值
print(list4)  # [11, 2, [10000, 200]]
print(list6)  # [10, 2, [10000, 200]]

list4[2][1] = 20000  # 更改第二层元素的值
print(list4)  # [11, 2, [10000, 20000]]
print(list6)  # [10, 2, [10000, 200]]