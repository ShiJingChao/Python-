"""
    1. 命名空间定义:
        变量名和变量值的映射;
        命名空间是用字典实现, key就是变量的名, value就是变量值

    0805班:
        李雪 --> 人
    0722班:
        李雪 --> 人

    2. 命名空间的分类:
        python程序执行的过程中, 同时会有2-3个活动的命名空间(函数调用时,有3个命名空间, 函数调用结束后,有两个命名空间)
        根据变量的位置, 将命名空间分为三类:

            局部命名空间:Local, 指的是函数所拥有的命名空间, 包括函数的入参,函数内部的局部变量;
            全局命名空间:Global, 指的是模块(.py文件)所拥有的命名空间, 包括函数, 类, 全局的变量,导入模块中的内容;
            内建命名空间:Build-in, 指的是python内置的函数和异常.

            同一个命名空间中,变量名不能重复; 不同的命名空间之间,变量名互不影响;

    3. 命名空间的生命周期

        局部命名空间: 函数调用的时候创建, 函数调用结束后被删除
        全局命名空间: 模块被加载的时候创建, python解释器退出的时候被删除
        内建命名空间: 随着python解释器的启动而创建, python解释器退出的时候被删除

    4. 命名空间的访问
        locals()  用这个函数可以访问到局部的命名空间
        globals() 用这个函数可以访问到全局的命名空间

        标准的情况是:
            在局部中, 使用locals()
            在全局中, 使用globals()

        特殊情况:
            在局部中, 使用globals(), 查看到的不是全局命名空间中所有的内容
                                            而是, 在局部中能访问到的全局命名空间中的内容

    5. 命名空间的创建顺序:
        python解释器启动 --> 创建内建命名空间 --> 加载模块 --> 创建全局命名空间 --> 函数的调用 --> 创建局部命名空间

    6. 命名空间的销毁顺序:
        函数的调用结束 --> 销毁局部命名空间 --> python解释器退出 --> 销毁全局命名空间 --> 内建命名空间

    总结一下: 局部命名空间是随着函数的调用动态的创建出来的, 随着函数调用的结束动态销毁的;
"""
# import random
# random.random()
# a = "abc"
#
# def get_num():
#     a = 10
#     a = 100
#     print(a)  # 10
#
# print(a) # abc
# print("-----")


a = "我是一个a"


def func():
    b = "我是一个b"
    # print(a)
    # print(locals())  # 访问局部命名空间中的内容 {'b': '我是一个b'}
    print(globals())  # 访问的是,在局部中能访问到的,全局命名空间中的内容


func()
c = "abc"

print(globals())  # 访问全局命名空间中的内容




